#!/bin/bash
# <oldrev> <newrev> <refname>
# update a blame tree
DENY_FAST_FORWARD_FOR="refs/heads/master"

while read oldrev newrev ref
do
	if [[ "$oldrev" == "0000000000000000000000000000000000000000" ]]; then
		#create new branch
		continue;
	fi
	if [[ "${DENY_FAST_FORWARD_FOR}" =~ "${ref}" ]] ; then
		base=`git merge-base $oldrev $newrev`
		if [[ "${base}" != "${oldrev}" ]]; then
			#non fast-forward, mean force
			echo -e "\033[91mPlease don't force update to \"master\".\033[0m"
			exit 1
		fi
	fi
done

hard_limit=10000000
soft_limit=500000

list_new_or_modified_files()
{
    git diff --staged --name-status|sed -e '/^D/ d; /^D/! s/.\s\+//'
}

unmunge()
{
    local result="${1#\"}"
    result="${result%\"}"
    env echo -e "$result"
}

check_file_size()
{
    n=0
    while read -r munged_filename
    do
        f="$(unmunge "$munged_filename")"
        h=$(git ls-files -s "$f"|cut -d' ' -f 2)
        s=$(git cat-file -s "$h")
        if [ "$s" -gt $hard_limit ]
        then
            env printf "\033[91m"
            env echo -E 1>&2 "ERROR: hard size limit ($hard_limit) exceeded: $munged_filename ($s)"
            env printf "\033[0m"
            n=$((n+1))
        elif [ "$s" -gt $soft_limit ]
        then
            env printf "\033[93m"
            env echo -E 1>&2 "WARNING: soft size limit ($soft_limit) exceeded: $munged_filename ($s)"
            env printf "\033[0m"
        fi
    done

    [ $n -eq 0 ]
}



list_new_or_modified_files | check_file_size
